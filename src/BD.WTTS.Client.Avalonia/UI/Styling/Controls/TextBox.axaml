<Styles
    xmlns="https://github.com/avaloniaui"
    xmlns:spp="https://steampp.net/ui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:s="https://steampp.net/services"
    xmlns:ui="using:FluentAvalonia.UI.Controls"
    x:CompileBindings="True">
    <Design.PreviewWith>
        <Border Padding="20">
            <StackPanel Spacing="5">
                <TextBox />
                <TextBox Text="Hello Down there" />
                <TextBox Watermark="Watermark" />
                <TextBox IsEnabled="False" Text="Test" />
                <TextBox Classes="clearButton" Text="Test Clear" />
                <TextBox
                    Classes="revealPasswordButton"
                    PasswordChar="{StaticResource PasswordChar}"
                    Text="Test Password" />
            </StackPanel>
        </Border>
    </Design.PreviewWith>
    <Styles.Resources>
        <Thickness x:Key="TextBoxIconMargin">12,0,0,0</Thickness>

        <!--<MenuFlyout x:Key="DefaultTextBoxContextMenu" x:Name="TextBoxContextMenu">-->
        <MenuFlyout x:Key="DefaultTextBoxContextFlyout">
            <MenuItem
                x:Name="TextBoxContextMenuCutItem"
                Command="{Binding $parent[TextBox].Cut}"
                Header="{Binding Path=Res.Cut, Mode=OneWay, Source={x:Static spp:Strings.Cut}}"
                InputGesture="{x:Static TextBox.CutGesture}"
                IsEnabled="{Binding $parent[TextBox].CanCut}" />
            <MenuItem
                x:Name="TextBoxContextMenuCopyItem"
                Command="{Binding $parent[TextBox].Copy}"
                Header="{Binding Path=Res.Copy, Mode=OneWay, Source={x:Static spp:Strings.Copy}}"
                InputGesture="{x:Static TextBox.CopyGesture}"
                IsEnabled="{Binding $parent[TextBox].CanCopy}" />
            <MenuItem
                x:Name="TextBoxContextMenuPasteItem"
                Command="{Binding $parent[TextBox].Paste}"
                Header="{Binding Path=Res.Paste, Mode=OneWay, Source={x:Static spp:Strings.Paste}}"
                InputGesture="{x:Static TextBox.PasteGesture}"
                IsEnabled="{Binding $parent[TextBox].CanPaste}" />
            <MenuItem Header="-" />
            <MenuItem
                x:Name="TextBoxContextMenuSelectAllItem"
                Command="{Binding $parent[TextBox].SelectAll}"
                Header="{Binding Path=Res.SelectAll, Mode=OneWay, Source={x:Static spp:Strings.SelectAll}}"
                InputGesture="Ctrl + A"
                IsEnabled="{Binding $parent[TextBox].Text, Converter={StaticResource IsNullConverter}, ConverterParameter=invert}" />
        </MenuFlyout>

        <ControlTheme x:Key="TextBoxPasswordButtonStyle" TargetType="ToggleButton">
            <Setter Property="Template">
                <ControlTemplate>
                    <Border
                        Name="ButtonLayoutGrid"
                        Margin="{DynamicResource TextBoxInnerButtonMargin}"
                        Background="Transparent"
                        BorderBrush="{DynamicResource TextControlButtonBorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}">
                        <ui:FontIcon
                            Name="Glyph"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            FontFamily="{StaticResource SymbolThemeFontFamily}"
                            FontSize="{StaticResource TextBoxIconFontSize}"
                            Foreground="{TemplateBinding Foreground}"
                            Glyph="{StaticResource RedEye}" />
                    </Border>
                </ControlTemplate>
            </Setter>

            <Style Selector="^:pointerover">
                <Style Selector="^ /template/ Border#ButtonLayoutGrid">
                    <Setter Property="Background" Value="{DynamicResource TextControlButtonBackgroundPointerOver}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource TextControlButtonBorderBrushPointerOver}" />
                </Style>
            </Style>

            <Style Selector="^:pressed">
                <Style Selector="^ /template/ Border#ButtonLayoutGrid">
                    <Setter Property="Background" Value="{DynamicResource TextControlButtonBackgroundPressed}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource TextControlButtonBorderBrushPressed}" />
                </Style>
            </Style>

            <Style Selector="^:checked /template/ ui|FontIcon#Glyph">
                <Setter Property="Glyph" Value="{StaticResource Hide}" />
            </Style>

            <Style Selector="^:disabled /template/ Border#ButtonLayoutGrid">
                <Setter Property="Opacity" Value="0" />
            </Style>
        </ControlTheme>
    </Styles.Resources>

    <Style Selector="PathIcon.TextBoxIcon">
        <Setter Property="Height" Value="18" />
        <Setter Property="Width" Value="18" />
        <Setter Property="Opacity" Value="0.8" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="{StaticResource TextBoxIconMargin}" />
    </Style>

    <Style Selector="TextBox">
        <Setter Property="ContextMenu" Value="{x:Null}" />
        <Setter Property="ContextFlyout" Value="{StaticResource DefaultTextBoxContextFlyout}" />
    </Style>

    <Style Selector="TextBox[AcceptsReturn=False]">
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <Style Selector="TextBox.revealPasswordButton[AcceptsReturn=False][IsReadOnly=False]:not(TextBox:empty)">
        <Setter Property="InnerRightContent">
            <Template>
                <ToggleButton
                    Width="30"
                    Padding="{StaticResource HelperButtonThemePadding}"
                    VerticalAlignment="Stretch"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{DynamicResource ControlCornerRadius}"
                    Focusable="False"
                    FontSize="{TemplateBinding FontSize}"
                    IsChecked="{Binding $parent[TextBox].RevealPassword, Mode=TwoWay}"
                    IsTabStop="False"
                    Theme="{StaticResource TextBoxPasswordButtonStyle}" />
            </Template>
        </Setter>
    </Style>

    <Style Selector="TextBox.clearButton[AcceptsReturn=False][IsReadOnly=False]:focus:not(TextBox:empty)">
        <Setter Property="InnerRightContent">
            <Template>
                <Button
                    Width="30"
                    Padding="{StaticResource HelperButtonThemePadding}"
                    VerticalAlignment="Stretch"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Command="{Binding $parent[TextBox].Clear}"
                    CornerRadius="{DynamicResource ControlCornerRadius}"
                    Focusable="False"
                    FontSize="{TemplateBinding FontSize}"
                    IsTabStop="False"
                    Theme="{StaticResource TextBoxDeleteButtonStyle}" />
            </Template>
        </Setter>
    </Style>


    <Style Selector="TextBox.readonlybox">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style Selector="TextBox.readonlybox:pointerover /template/ Border#PART_BorderElement">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style Selector="TextBox.readonlybox:focus  /template/ Border#PART_BorderElement">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
</Styles>
